From bf6788870f3749bd9edfbf6a69158735d24fdc88 Mon Sep 17 00:00:00 2001
From: Jeremy Kemper <jeremy@bitsweat.net>
Date: Thu, 28 May 2009 17:12:28 -0500
Subject: [PATCH 4/6] Ruby 1.9: ERB template encoding using a magic comment at the top of the file

---
 actionpack/lib/action_view/template/template.rb    |   92 ++++++++++++++++++++
 .../lib/action_view/template_handlers/erb.rb       |    6 +-
 actionpack/test/fixtures/test/utf8.html.erb        |    5 +-
 actionpack/test/template/render_test.rb            |    2 +-
 4 files changed, 98 insertions(+), 7 deletions(-)
 create mode 100644 actionpack/lib/action_view/template/template.rb

diff --git a/actionpack/lib/action_view/template/template.rb b/actionpack/lib/action_view/template/template.rb
new file mode 100644
index 0000000..a989725
--- /dev/null
+++ b/actionpack/lib/action_view/template/template.rb
@@ -0,0 +1,92 @@
+# encoding: utf-8
+# This is so that templates compiled in this file are UTF-8
+
+require 'set'
+require "action_view/template/path"
+
+module ActionView
+  class Template
+    extend TemplateHandlers
+    attr_reader :source, :identifier, :handler, :mime_type, :details
+    
+    def initialize(source, identifier, handler, details)
+      @source     = source
+      @identifier = identifier
+      @handler    = handler
+      @details    = details
+
+      format = details.delete(:format) || begin
+        # TODO: Clean this up
+        handler.respond_to?(:default_format) ? handler.default_format.to_sym.to_s : "html"
+      end
+      @mime_type = Mime::Type.lookup_by_extension(format.to_s)
+      @details[:formats] = Array.wrap(format && format.to_sym)
+    end
+    
+    def render(view, locals, &blk)
+      method_name = compile(locals, view)
+      view.send(method_name, locals, &blk)
+    end
+    
+    # TODO: Figure out how to abstract this
+    def variable_name
+      identifier[%r'_?(\w+)(\.\w+)*$', 1].to_sym
+    end
+
+    # TODO: Figure out how to abstract this
+    def counter_name
+      "#{variable_name}_counter".to_sym
+    end
+    
+    # TODO: kill hax
+    def partial?
+      @details[:partial]
+    end
+
+  private
+
+    def compile(locals, view)
+      method_name = build_method_name(locals)
+      
+      return method_name if view.respond_to?(method_name)
+      
+      locals_code = locals.keys.map! { |key| "#{key} = local_assigns[:#{key}];" }.join
+
+      code = @handler.call(self)
+      encoding_comment = $1 if code.sub!(/\A(#.*coding.*)\n/, '')
+
+      source = <<-end_src
+        def #{method_name}(local_assigns)
+          old_output_buffer = output_buffer;#{locals_code};#{code}
+        ensure
+          self.output_buffer = old_output_buffer
+        end
+      end_src
+
+      if encoding_comment
+        source = "#{encoding_comment}\n#{source}"
+        line = -1
+      else
+        line = 0
+      end
+
+      begin
+        ActionView::Base::CompiledTemplates.module_eval(source, identifier, line)
+        method_name
+      rescue Exception => e # errors from template code
+        if logger = (view && view.logger)
+          logger.debug "ERROR: compiling #{method_name} RAISED #{e}"
+          logger.debug "Function body: #{source}"
+          logger.debug "Backtrace: #{e.backtrace.join("\n")}"
+        end
+
+        raise ActionView::TemplateError.new(self, {}, e)
+      end
+    end
+  
+    def build_method_name(locals)
+      # TODO: is locals.keys.hash reliably the same?
+      "_render_template_#{@identifier.hash}_#{__id__}_#{locals.keys.hash}".gsub('-', "_")
+    end
+  end
+end
diff --git a/actionpack/lib/action_view/template_handlers/erb.rb b/actionpack/lib/action_view/template_handlers/erb.rb
index e3120ba..2bf87ba 100644
--- a/actionpack/lib/action_view/template_handlers/erb.rb
+++ b/actionpack/lib/action_view/template_handlers/erb.rb
@@ -11,11 +11,7 @@ module ActionView
       self.erb_trim_mode = '-'
 
       def compile(template)
-        src = ::ERB.new("<% __in_erb_template=true %>#{template.source}", nil, erb_trim_mode, '@output_buffer').src
-
-        # Ruby 1.9 prepends an encoding to the source. However this is
-        # useless because you can only set an encoding on the first line
-        RUBY_VERSION >= '1.9' ? src.sub(/\A#coding:.*\n/, '') : src
+        ::ERB.new("<% __in_erb_template=true %>#{template.source}", nil, erb_trim_mode, '@output_buffer').src
       end
     end
   end
diff --git a/actionpack/test/fixtures/test/utf8.html.erb b/actionpack/test/fixtures/test/utf8.html.erb
index 0b4d19a..58cd03b 100644
--- a/actionpack/test/fixtures/test/utf8.html.erb
+++ b/actionpack/test/fixtures/test/utf8.html.erb
@@ -1,2 +1,5 @@
+<%# encoding: utf-8 -%>
 Русский текст
-日本語のテキスト
\ No newline at end of file
+<%= "日".encoding %>
+<%= @output_buffer.encoding %>
+<%= __ENCODING__ %>
diff --git a/actionpack/test/template/render_test.rb b/actionpack/test/template/render_test.rb
index 9adf053..ff7e915 100644
--- a/actionpack/test/template/render_test.rb
+++ b/actionpack/test/template/render_test.rb
@@ -251,7 +251,7 @@ module RenderTestCases
   if '1.9'.respond_to?(:force_encoding)
     def test_render_utf8_template
       result = @view.render(:file => "test/utf8.html.erb", :layouts => "layouts/yield")
-      assert_equal "Русский текст\n日本語のテキスト", result
+      assert_equal "Русский текст\nUTF-8\nUTF-8\nUTF-8\n", result
       assert_equal Encoding::UTF_8, result.encoding
     end
   end
-- 
1.6.1

